//
//  STPhotoCommentsWorker.swift
//  STPhotoDetails
//
//  Created by Dimitri Strauneanu on 30/07/2019.
//  Copyright (c) 2019 Streetography. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import STPhotoCore

protocol STPhotoCommentsWorkerDelegate: class {
    func successDidFetchPhotoComments(comments: [STComment])
    func failureDidFetchPhotoComments(error: OperationError)
    
    func successDidFetchAvatarImage(image: UIImage?, displayedComment: STPhotoComments.DisplayedComment)
    func failureDidFetchAvatarImage(displayedComment: STPhotoComments.DisplayedComment, error: OperationError)
}

class STPhotoCommentsWorker {
    weak var delegate: STPhotoCommentsWorkerDelegate?
    
    var photoCommentsTask: PhotoCommentsTaskProtocol = TaskConfigurator.shared.photoCommentsTask()
    var imageTask: ImageTaskProtocol = TaskConfigurator.shared.imageTask()
    
    init(delegate: STPhotoCommentsWorkerDelegate?) {
        self.delegate = delegate
    }
    
    func fetchPhotoComments(photoId: String, page: Int, limit: Int) {
        let model = PhotoCommentsTaskModel.Fetch(photoId: photoId, page: page, limit: limit)
        self.photoCommentsTask.fetchPhotoComments(model: model, completionHandler: { result in
            switch result {
                case .success(let comments): self.delegate?.successDidFetchPhotoComments(comments: comments); break
                case .failure(let error): self.delegate?.failureDidFetchPhotoComments(error: error); break
            }
        })
    }
    
    func fetchAvatarImage(displayedComment: STPhotoComments.DisplayedComment) {
        self.imageTask.fetchImage(url: displayedComment.avatarImageUrl) { result in
            switch result {
                case .success(let image): self.delegate?.successDidFetchAvatarImage(image: image, displayedComment: displayedComment); break
                case .failure(let error): self.delegate?.failureDidFetchAvatarImage(displayedComment: displayedComment, error: error); break
            }
        }
    }
}
