//
//  STPhotoDetailsInteractor.swift
//  STPhotoDetails
//
//  Created by Dimitri Strauneanu on 24/06/2019.
//  Copyright (c) 2019 Streetography. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import STPhotoCore

protocol STPhotoDetailsBusinessLogic {
    func setPhotoId(id: String)
    func shouldFetchPhoto()
}

class STPhotoDetailsInteractor: STPhotoDetailsBusinessLogic {
    var presenter: STPhotoDetailsPresentationLogic?
    var worker: STPhotoDetailsWorker?
    
    var photo: STPhoto!
    var photoId: String = ""
    
    init() {
        self.worker = STPhotoDetailsWorker(delegate: self)
    }
    
    func setPhotoId(id: String) {
        self.photoId = id
    }
}

// MARK: - Photo

extension STPhotoDetailsInteractor: STPhotoDetailsWorkerDelegate {
    func shouldFetchPhoto() {
        self.presenter?.presentWillFetchPhoto()
        self.worker?.fetchPhoto(photoId: self.photoId)
    }
    
    func successDidFetchPhoto(photo: STPhoto) {
        self.photo = photo
        self.presenter?.presentDidFetchPhoto()
        self.presenter?.presentPhoto(response: STPhotoDetails.PresentPhoto.Response(photo: photo))
        self.presenter?.presentPhotoLikes(response: STPhotoDetails.PresentPhotoLikes.Response(count: photo.likeCount))
        self.presenter?.presentPhotoComments(response: STPhotoDetails.PresentPhotoComments.Response(count: photo.commentCount))
        
        self.shouldFetchPhotoImage()
        self.shouldFetchPhotoUserImage()
        self.shouldFetchPhotoCollection()
        self.shouldFetchPhotoLocationAddress()
        self.shouldFetchPhotoLocationEntities()
    }
    
    func failureDidFetchPhoto(error: OperationError) {
        self.presenter?.presentDidFetchPhoto()
    }
}

// MARK: - Photo image

extension STPhotoDetailsInteractor {
    private func shouldFetchPhotoImage() {
        self.presenter?.presentWillFetchPhotoImage()
        self.worker?.fetchPhotoImage(url: self.photo.imageUrl(size: self.photoImageSize()))
    }
    
    private func photoImageSize() -> CGSize {
        let screenWidth = UIScreen.main.bounds.width
        let scale = UIScreen.main.scale
        let size = screenWidth * scale
        return CGSize(width: size, height: size)
    }
    
    func successDidFetchPhotoImage(image: UIImage?) {
        self.presenter?.presentDidFetchPhotoImage()
        self.presenter?.presentPhotoImage(response: STPhotoDetails.PresentPhotoImage.Response(image: image))
    }
    
    func failureDidFetchPhotoImage(error: OperationError) {
        self.presenter?.presentDidFetchPhotoImage()
    }
}

// MARK: - Photo user image

extension STPhotoDetailsInteractor {
    private func shouldFetchPhotoUserImage() {
        self.presenter?.presentWillFetchPhotoUserImage()
        // TODO: - Update image url for user image!!!
        self.worker?.fetchPhotoUserImage(url: nil)
    }
    
    func successDidFetchPhotoUserImage(image: UIImage?) {
        self.presenter?.presentDidFetchPhotoUserImage()
        self.presenter?.presentPhotoUserImage(response: STPhotoDetails.PresentPhotoUserImage.Response(image: image))
    }
    
    func failureDidFetchPhotoUserImage(error: OperationError) {
        self.presenter?.presentDidFetchPhotoUserImage()
    }
}

// MARK: - Photo collection

extension STPhotoDetailsInteractor {
    private func shouldFetchPhotoCollection() {
        if let id = self.photo.collectionId {
            self.presenter?.presentWillFetchPhotoCollection()
            self.worker?.fetchPhotoCollection(id: id)
        }
    }
    
    func successDidFetchPhotoCollection(collection: STCollection) {
        self.presenter?.presentDidFetchPhotoCollection()
        self.presenter?.presentPhotoCollection(response: STPhotoDetails.PresentPhotoCollection.Response(collection: collection))
    }
    
    func failureDidFetchPhotoCollection(error: OperationError) {
        self.presenter?.presentDidFetchPhotoCollection()
    }
}

// MARK: - Photo location address

extension STPhotoDetailsInteractor {
    private func shouldFetchPhotoLocationAddress() {
        if let location = self.photo.location {
            self.presenter?.presentWillFetchPhotoLocationAddress()
            self.worker?.fetchPhotoLocationAddress(location: location)
        }
    }
    
    func successDidFetchLocationAddress(address: STAddress) {
        self.presenter?.presentDidFetchPhotoLocationAddress()
        self.presenter?.presentPhotoLocationAddress(response: STPhotoDetails.PresentPhotoLocationAddress.Response(address: address))
    }
    
    func failureDidFetchLocationAddress(error: OperationError) {
        self.presenter?.presentDidFetchPhotoLocationAddress()
    }
}

// MARK: - Photo entities

extension STPhotoDetailsInteractor {
    private func shouldFetchPhotoLocationEntities() {
        if let location = self.photo.location {
            self.presentWillFetchPhotoLocationEntities()
            self.worker?.fetchPhotoLocationEntities(location: location)
        }
    }
    
    private func presentWillFetchPhotoLocationEntities() {
        let filteredEntities = self.photoLocationEntities().filter({ $0.value >= 0 })
        filteredEntities.forEach({ self.presenter?.presentWillFetchPhotoLocationEntity(response: STPhotoDetails.PhotoLocationEntityLoadingState.Response(type: $0.key)) })
    }
    
    private func presentDidFetchPhotoLocationEntities() {
        let filteredEntities = self.photoLocationEntities().filter({ $0.value >= 0 })
        filteredEntities.forEach({ self.presenter?.presentDidFetchPhotoLocationEntity(response: STPhotoDetails.PhotoLocationEntityLoadingState.Response(type: $0.key)) })
    }
    
    func successDidFetchPhotoLocationEntities(entities: [EntityLevel : GeoEntity]) {
        self.presentDidFetchPhotoLocationEntities()
        self.photoLocationEntities(entities: entities).forEach({ self.presentPhotoLocationEntity(type: $0.key, geoEntity: $0.value) })
    }
    
    func failureDidFetchPhotoLocationEntities(error: OperationError) {
        self.presentDidFetchPhotoLocationEntities()
    }
    
    private func presentPhotoLocationEntity(type: STPhotoDetails.ItemType, geoEntity: GeoEntity) {
        self.presenter?.presentPhotoLocationEntity(response: STPhotoDetails.PresentPhotoLocationEntity.Response(type: type, geoEntity: geoEntity))
    }
    
    private func photoLocationEntities() -> [STPhotoDetails.ItemType: Int] {
        return [
            STPhotoDetails.ItemType.blockEntity: self.photo.blockId,
            STPhotoDetails.ItemType.neighborhoodEntity: self.photo.neighborhoodId,
            STPhotoDetails.ItemType.cityEntity: self.photo.cityId,
            STPhotoDetails.ItemType.countyEntity: self.photo.countyId,
            STPhotoDetails.ItemType.stateEntity: self.photo.stateId,
            STPhotoDetails.ItemType.countryEntity: self.photo.countryId
        ]
    }
    
    private func photoLocationEntities(entities: [EntityLevel: GeoEntity]) -> [STPhotoDetails.ItemType: GeoEntity] {
        return [
            STPhotoDetails.ItemType.blockEntity : entities[.block],
            STPhotoDetails.ItemType.neighborhoodEntity: entities[.neighborhood],
            STPhotoDetails.ItemType.cityEntity : entities[.city],
            STPhotoDetails.ItemType.countyEntity : entities[.county],
            STPhotoDetails.ItemType.stateEntity : entities[.state],
            STPhotoDetails.ItemType.countryEntity : entities[.country]
        ].compactMapValues({ $0 })
    }
}
