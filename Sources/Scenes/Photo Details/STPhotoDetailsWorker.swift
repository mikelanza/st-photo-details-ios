//
//  STPhotoDetailsWorker.swift
//  STPhotoDetails
//
//  Created by Dimitri Strauneanu on 24/06/2019.
//  Copyright (c) 2019 Streetography. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import STPhotoCore

protocol STPhotoDetailsWorkerDelegate: class {
    func successDidFetchPhoto(photo: STPhoto)
    func failureDidFetchPhoto(error: OperationError)
    
    func successDidFetchPhotoImage(image: UIImage?)
    func failureDidFetchPhotoImage(error: OperationError)
    
    func successDidFetchPhotoUserImage(image: UIImage?)
    func failureDidFetchPhotoUserImage(error: OperationError)
    
    func successDidFetchPhotoCollection(collection: STCollection)
    func failureDidFetchPhotoCollection(error: OperationError)
    
    func successDidFetchLocationAddress(address: STAddress)
    func failureDidFetchLocationAddress(error: OperationError)
    
    func successDidFetchPhotoLocationEntities(entities: [EntityLevel: GeoEntity])
    func failureDidFetchPhotoLocationEntities(error: OperationError)
}

class STPhotoDetailsWorker {
    weak var delegate: STPhotoDetailsWorkerDelegate?
    
    var photoService: PhotoServiceProtocol = ServiceConfigurator.shared.photoService()
    var imageService: ImageServiceProtocol = ServiceConfigurator.shared.imageService()
    var photoCollectionService: PhotoCollectionServiceProtocol = ServiceConfigurator.shared.photoCollectionService()
    var locationAddressService: LocationAddressServiceProtocol = ServiceConfigurator.shared.locationAddressService()
    var locationEntitiesService: LocationEntitiesServiceProtocol = ServiceConfigurator.shared.locationEntitiesService()
    
    init(delegate: STPhotoDetailsWorkerDelegate?) {
        self.delegate = delegate
    }
    
    func fetchPhoto(photoId: String) {
        self.photoService.fetchPhoto(photoId: photoId) { result in
            switch result {
                case .success(let photo): self.delegate?.successDidFetchPhoto(photo: photo); break
                case .failure(let error): self.delegate?.failureDidFetchPhoto(error: error); break
            }
        }
    }
    
    func fetchPhotoImage(url: String?) {
        self.imageService.fetchImage(url: url) { result in
            switch result {
                case .success(let image): self.delegate?.successDidFetchPhotoImage(image: image); break
                case .failure(let error): self.delegate?.failureDidFetchPhotoImage(error: error); break
            }
        }
    }
    
    func fetchPhotoUserImage(url: String?) {
        self.imageService.fetchImage(url: url) { result in
            switch result {
                case .success(let image): self.delegate?.successDidFetchPhotoUserImage(image: image); break
                case .failure(let error): self.delegate?.failureDidFetchPhotoUserImage(error: error); break
            }
        }
    }
    
    func fetchPhotoCollection(id: String) {
        self.photoCollectionService.fetchPhotoCollection(collectionId: id) { result in
            switch result {
                case .success(let collection): self.delegate?.successDidFetchPhotoCollection(collection: collection); break
                case .failure(let error): self.delegate?.failureDidFetchPhotoCollection(error: error); break
            }
        }
    }
    
    func fetchPhotoLocationAddress(location: STLocation) {
        self.locationAddressService.fetchLocationAddress(location: location) { result in
            switch result {
                case .success(let address): self.delegate?.successDidFetchLocationAddress(address: address); break
                case .failure(let error): self.delegate?.failureDidFetchLocationAddress(error: error); break
            }
        }
    }
    
    func fetchPhotoLocationEntities(location: STLocation) {
        self.locationEntitiesService.fetchPhotoEntities(location: location) { result in
            switch result {
                case .success(let entities): self.delegate?.successDidFetchPhotoLocationEntities(entities: entities); break
                case .failure(let error): self.delegate?.failureDidFetchPhotoLocationEntities(error: error); break
            }
        }
    }
}
