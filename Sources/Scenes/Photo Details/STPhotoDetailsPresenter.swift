//
//  STPhotoDetailsPresenter.swift
//  STPhotoDetails
//
//  Created by Dimitri Strauneanu on 24/06/2019.
//  Copyright (c) 2019 Streetography. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import STPhotoCore

protocol STPhotoDetailsPresentationLogic {
    func presentWillFetchPhoto()
    func presentDidFetchPhoto()
    func presentPhoto(response: STPhotoDetails.PresentPhoto.Response)
    
    func presentWillFetchPhotoImage()
    func presentDidFetchPhotoImage()
    func presentPhotoImage(response: STPhotoDetails.PresentPhotoImage.Response)
    
    func presentWillFetchPhotoUserImage()
    func presentDidFetchPhotoUserImage()
    func presentPhotoUserImage(response: STPhotoDetails.PresentPhotoUserImage.Response)
    
    func presentWillFetchPhotoCollection()
    func presentDidFetchPhotoCollection()
    func presentPhotoCollection(response: STPhotoDetails.PresentPhotoCollection.Response)
    
    func presentWillFetchPhotoLocationAddress()
    func presentDidFetchPhotoLocationAddress()
    func presentPhotoLocationAddress(response: STPhotoDetails.PresentPhotoLocationAddress.Response)
    
    func presentWillFetchPhotoLocationEntity(response: STPhotoDetails.PhotoLocationEntityLoadingState.Response)
    func presentDidFetchPhotoLocationEntity(response: STPhotoDetails.PhotoLocationEntityLoadingState.Response)
    func presentPhotoLocationEntity(response: STPhotoDetails.PresentPhotoLocationEntity.Response)
    
    func presentPhotoLikes(response: STPhotoDetails.PresentPhotoLikes.Response)
    func presentPhotoComments(response: STPhotoDetails.PresentPhotoComments.Response)
}

class STPhotoDetailsPresenter: STPhotoDetailsPresentationLogic {
    weak var displayer: STPhotoDetailsDisplayLogic?
    
    private var dateFormatter: DateFormatter
    
    init() {
        self.dateFormatter = DateFormatter()
        self.dateFormatter.dateStyle = .long
        self.dateFormatter.timeStyle = .none
    }
    
    func presentWillFetchPhoto() {
        self.displayer?.displayWillFetchPhoto()
    }
    
    func presentDidFetchPhoto() {
        self.displayer?.displayDidFetchPhoto()
    }
    
    func presentPhoto(response: STPhotoDetails.PresentPhoto.Response) {
        let items = self.displayedItems(photo: response.photo)
        self.displayer?.displayPhoto(viewModel: STPhotoDetails.PresentPhoto.ViewModel(items: items))
    }
    
    func presentWillFetchPhotoImage() {
        self.displayer?.displayWillFetchPhotoImage()
    }
    
    func presentDidFetchPhotoImage() {
        self.displayer?.displayDidFetchPhotoImage()
    }
    
    func presentPhotoImage(response: STPhotoDetails.PresentPhotoImage.Response) {
        self.displayer?.displayPhotoImage(viewModel: STPhotoDetails.PresentPhotoImage.ViewModel(image: response.image))
    }
    
    func presentWillFetchPhotoUserImage() {
        self.displayer?.displayWillFetchPhotoUserImage()
    }
    
    func presentDidFetchPhotoUserImage() {
        self.displayer?.displayDidFetchPhotoUserImage()
    }
    
    func presentPhotoUserImage(response: STPhotoDetails.PresentPhotoUserImage.Response) {
        self.displayer?.displayPhotoUserImage(viewModel: STPhotoDetails.PresentPhotoUserImage.ViewModel(image: response.image))
    }
    
    func presentWillFetchPhotoCollection() {
        self.displayer?.displayWillFetchPhotoCollection()
    }
    
    func presentDidFetchPhotoCollection() {
        self.displayer?.displayDidFetchPhotoCollection()
    }
    
    func presentPhotoCollection(response: STPhotoDetails.PresentPhotoCollection.Response) {
        self.displayer?.displayPhotoCollection(viewModel: STPhotoDetails.PresentPhotoCollection.ViewModel(name: response.collection.name))
    }
    
    func presentWillFetchPhotoLocationAddress() {
        self.displayer?.displayWillFetchPhotoLocationAddress()
    }
    
    func presentDidFetchPhotoLocationAddress() {
        self.displayer?.displayDidFetchPhotoLocationAddress()
    }
    
    func presentPhotoLocationAddress(response: STPhotoDetails.PresentPhotoLocationAddress.Response) {
        let names: [String?] = [response.address.street, response.address.city, response.address.state, response.address.country]
        let address = names.compactMap({ $0 }).joined(separator: ", ")
        self.displayer?.displayPhotoLocationAddress(viewModel: STPhotoDetails.PresentPhotoLocationAddress.ViewModel(address: address))
    }
    
    func presentWillFetchPhotoLocationEntity(response: STPhotoDetails.PhotoLocationEntityLoadingState.Response) {
        self.displayer?.displayWillFetchPhotoLocationEntity(viewModel: STPhotoDetails.PhotoLocationEntityLoadingState.ViewModel(type: response.type))
    }
    
    func presentDidFetchPhotoLocationEntity(response: STPhotoDetails.PhotoLocationEntityLoadingState.Response) {
        self.displayer?.displayDidFetchPhotoLocationEntity(viewModel: STPhotoDetails.PhotoLocationEntityLoadingState.ViewModel(type: response.type))
    }
    
    func presentPhotoLocationEntity(response: STPhotoDetails.PresentPhotoLocationEntity.Response) {
        let name = response.geoEntity.name ?? ""
        self.displayer?.displayPhotoLocationEntity(viewModel: STPhotoDetails.PresentPhotoLocationEntity.ViewModel(type: response.type, name: name))
    }
    
    func presentPhotoLikes(response: STPhotoDetails.PresentPhotoLikes.Response) {
        let title = STPhotoDetailsLocalization.shared.likeCountTitle(response.count)
        self.displayer?.displayPhotoLikes(viewModel: STPhotoDetails.PresentPhotoLikes.ViewModel(title: title))
    }
    
    func presentPhotoComments(response: STPhotoDetails.PresentPhotoComments.Response) {
        let title = STPhotoDetailsLocalization.shared.commentCountTitle(response.count)
        self.displayer?.displayPhotoComments(viewModel: STPhotoDetails.PresentPhotoComments.ViewModel(title: title))
    }
}

extension STPhotoDetailsPresenter {
    private func displayedItems(photo: STPhoto) -> [STPhotoDetails.Item] {
        var items: [STPhotoDetails.Item?] = []
        items.append(self.photoImageItem(photo: photo))
        items.append(self.photoDetailsItem(photo: photo))
        items.append(self.photoCollectionItem(photo: photo))
        items.append(self.photoLocationItem(photo: photo))
        items.append(self.photoBlockItem(photo: photo))
        items.append(self.photoNeighborhoodItem(photo: photo))
        items.append(self.photoCityItem(photo: photo))
        items.append(self.photoCountyItem(photo: photo))
        items.append(self.photoStateItem(photo: photo))
        items.append(self.photoCountryItem(photo: photo))
        items.append(self.emptySpaceItem())
        return items.compactMap({ $0 })
    }
    
    private func photoImageItem(photo: STPhoto) -> STPhotoDetails.Item {
        let displayedPhotoImage = STPhotoDetails.DisplayedPhotoImage()
        displayedPhotoImage.imageDominantColor = UIColor(hexString: photo.dominantColor)
        return STPhotoDetails.Item(type: STPhotoDetails.ItemType.photoImage, model: displayedPhotoImage)
    }
    
    private func photoDetailsItem(photo: STPhoto) -> STPhotoDetails.Item {
        let displayedPhotoDetails = STPhotoDetails.DisplayedPhotoDetails()
        displayedPhotoDetails.username = photo.user?.name ?? photo.fhUsername
        displayedPhotoDetails.photoTime = self.dateFormatter.string(from: photo.createdAt)
        displayedPhotoDetails.photoDescription = photo.text
        return STPhotoDetails.Item(type: STPhotoDetails.ItemType.photoDetails, model: displayedPhotoDetails)
    }
    
    private func photoCollectionItem(photo: STPhoto) -> STPhotoDetails.Item? {
        if photo.collectionId == nil { return nil }
        let displayedPhotoCollection = STPhotoDetails.DisplayedPhotoCollection()
        displayedPhotoCollection.title = STPhotoDetailsLocalization.shared.collectionTitle
        displayedPhotoCollection.image = STPhotoDetailsStyle.shared.photoEntityCellModel.collectionImage
        return STPhotoDetails.Item(type: STPhotoDetails.ItemType.photoCollection, model: displayedPhotoCollection)
    }
    
    private func photoLocationItem(photo: STPhoto) -> STPhotoDetails.Item? {
        if photo.location == nil { return nil }
        let displayedPhotoEntity = STPhotoDetails.DisplayedPhotoEntity()
        displayedPhotoEntity.title = STPhotoDetailsLocalization.shared.locationTitle
        displayedPhotoEntity.image = STPhotoDetailsStyle.shared.photoEntityCellModel.locationImage
        return STPhotoDetails.Item(type: STPhotoDetails.ItemType.photoLocation, model: displayedPhotoEntity)
    }
    
    private func photoBlockItem(photo: STPhoto) -> STPhotoDetails.Item? {
        let title = STPhotoDetailsLocalization.shared.blockTitle
        let image = STPhotoDetailsStyle.shared.photoEntityCellModel.blockImage
        return self.photoEntityItem(id: photo.blockId, type: STPhotoDetails.ItemType.blockEntity, title: title, image: image)
    }
    
    private func photoNeighborhoodItem(photo: STPhoto) -> STPhotoDetails.Item? {
        let title = STPhotoDetailsLocalization.shared.neighborhoodTitle
        let image = STPhotoDetailsStyle.shared.photoEntityCellModel.neighborhoodImage
        return self.photoEntityItem(id: photo.neighborhoodId, type: STPhotoDetails.ItemType.neighborhoodEntity, title: title, image: image)
    }
    
    private func photoCityItem(photo: STPhoto) -> STPhotoDetails.Item? {
        let title = STPhotoDetailsLocalization.shared.cityTitle
        let image = STPhotoDetailsStyle.shared.photoEntityCellModel.cityImage
        return self.photoEntityItem(id: photo.cityId, type: STPhotoDetails.ItemType.cityEntity, title: title, image: image)
    }
    
    private func photoCountyItem(photo: STPhoto) -> STPhotoDetails.Item? {
        let title = STPhotoDetailsLocalization.shared.countyTitle
        let image = STPhotoDetailsStyle.shared.photoEntityCellModel.countyImage
        return self.photoEntityItem(id: photo.countyId, type: STPhotoDetails.ItemType.countyEntity, title: title, image: image)
    }
    
    private func photoStateItem(photo: STPhoto) -> STPhotoDetails.Item? {
        let title = STPhotoDetailsLocalization.shared.stateTitle
        let image = STPhotoDetailsStyle.shared.photoEntityCellModel.stateImage
        return self.photoEntityItem(id: photo.stateId, type: STPhotoDetails.ItemType.stateEntity, title: title, image: image)
    }
    
    private func photoCountryItem(photo: STPhoto) -> STPhotoDetails.Item? {
        let title = STPhotoDetailsLocalization.shared.countryTitle
        let image = STPhotoDetailsStyle.shared.photoEntityCellModel.countryImage
        return self.photoEntityItem(id: photo.countryId, type: STPhotoDetails.ItemType.countryEntity, title: title, image: image)
    }
    
    private func photoEntityItem(id: Int, type: STPhotoDetails.ItemType, title: String, image: UIImage?) -> STPhotoDetails.Item? {
        if id < 0 { return nil }
        let displayedPhotoEntity = STPhotoDetails.DisplayedPhotoEntity()
        displayedPhotoEntity.title = title
        displayedPhotoEntity.image = image
        return STPhotoDetails.Item(type: type, model: displayedPhotoEntity)
    }
    
    private func emptySpaceItem() -> STPhotoDetails.Item {
        let model = STPhotoDetails.DisplayedSpace()
        model.height = 50
        return STPhotoDetails.Item(type: STPhotoDetails.ItemType.space, model: model)
    }
}
